{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.2"
    },
    "colab": {
      "name": "PyMongo.ipynb",
      "provenance": []
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_MDWqjT2bs3p",
        "colab_type": "text"
      },
      "source": [
        "# Jupyter Notebooks, SQLite, and PyMongo!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CAS65_7fcMaf",
        "colab_type": "text"
      },
      "source": [
        "Jupyter Notebook is a very useful tool to write organized Python code. Instead of writing all of your code in one long script, Jupyter Notebook allows you to organize your code in chunks called cells. This text cell (and the heading) are made in a markdown cell - it can be used to write notes about your code or hold long non-code blocks of text! Some people even write entire reports or presentations in Jupyter Notebook. This is great if you want to include a lot of code or run code during a presentation. Using the dropdown menu between the refresh and keyboard buttons, change the next cell to markdown, type something, and press the \"run\" button above to run it!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "KR921S_OQSHG"
      },
      "source": [
        "## Code cells\n",
        "Below is a **code cell**. Once the toolbar button indicates CONNECTED, click in the cell to select it and execute the contents in the following ways:\n",
        "\n",
        "* Click the **Play icon** in the left gutter of the cell;\n",
        "* Type **Cmd/Ctrl+Enter** to run the cell in place;\n",
        "* Type **Shift+Enter** to run the cell and move focus to the next cell (adding one if none exists); or\n",
        "* Type **Alt+Enter** to run the cell and insert a new code cell immediately below it.\n",
        "\n",
        "There are additional options for running some or all cells in the **Runtime** menu.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cF7ElA_YcmoE",
        "colab_type": "text"
      },
      "source": [
        "# SQLite Exercise"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "JpSebvNVfQaM"
      },
      "source": [
        "SQLite is a simple way to implement SQL in Python.\n",
        "It can work off of a database file (.db) that already has tables in it or an empty one.\n",
        "You can also insert tables into a .db file.\n",
        "We are going to to both!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OQYMBDypcmoI",
        "colab_type": "text"
      },
      "source": [
        "# Libraries"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "msfP2QV4cmoJ",
        "colab_type": "text"
      },
      "source": [
        "Two very important libraries we will need are pandas, and extremely popular data analysis library, and of course SQLite3."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "id": "N_YBKClIcmoL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import sqlite3\n",
        "import pandas as pd"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B-ikc7JtcmoX",
        "colab_type": "text"
      },
      "source": [
        "# Connecting to a Database File"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rzfqzCQhcmoY",
        "colab_type": "text"
      },
      "source": [
        "- Need to establish a connection: conn = sqlite3.connect('insert database file name here')\n",
        "- Need to establish a cursor object to execute queries: c = conn.cursor()\n",
        "- To execute queries: c.execute('insert SQL statement here')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "82y_G699cmoZ",
        "colab_type": "text"
      },
      "source": [
        "## Let's Explore Chinook!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iehzV_4Vcmoa",
        "colab_type": "text"
      },
      "source": [
        "To see the database diagram follow this link: http://www.sqlitetutorial.net/wp-content/uploads/2018/03/sqlite-sample-database-diagram-color.pdf"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": false,
        "id": "hK7DT3cDcmob",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "conn = sqlite3.connect('chinook.db') #Note: this file should be located in the same folder you are running this notebook from!\n",
        "c = conn.cursor()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": true,
        "id": "Z-lWpLZXcmoh",
        "colab_type": "text"
      },
      "source": [
        "To display query results, we can use a simple for loop. Run the next cell to see how to display the information in the playlists table."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": false,
        "id": "-1bDtCpycmoi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "for row in c.execute('SELECT * FROM playlists'):\n",
        "    print(row)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w3yzsuBjcmoo",
        "colab_type": "text"
      },
      "source": [
        "Now, use the next cell to write a query that displays all of the customers from the customers table"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": false,
        "id": "f5qiGvyXcmop",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QfzxVlYOcmoz",
        "colab_type": "text"
      },
      "source": [
        "As we can see, the output isn't that pretty. We can use the pandas library to create a dataframe from our query results!\n",
        "- pd.read_sql_query(query, conn): where query is the query you want to run and connection is the connection to the database you have established; conn is the connection variable we established above"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9ZVA88YHcmo0",
        "colab_type": "text"
      },
      "source": [
        "In the cell below, create a dataframe that holds all of Chinook's Canadian customers, by completing the query that is started:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": false,
        "id": "Y33fyIF6cmo1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "canadians = pd.read_sql_query(\"SELECT     \", conn)\n",
        "canadians"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ef85xodIcmo6",
        "colab_type": "text"
      },
      "source": [
        "Create a dataframe that holds the number of invoices per country in descending order"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": false,
        "id": "0jGrjwBpcmo6",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "invoicePerCountry = \n",
        "invoicePerCountry"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ozAGqJA9cmo_",
        "colab_type": "text"
      },
      "source": [
        "For each record in the Album table, we want the Title along with the Name of the Artist. This will require an inner join!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": false,
        "id": "Ul5bjQk8cmpA",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "records = \n",
        "records"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vmD3LqbVcmpF",
        "colab_type": "text"
      },
      "source": [
        "## Create Our Own Table"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5Un654b4cmpG",
        "colab_type": "text"
      },
      "source": [
        "Within the chinook database we want to create a table that holds each Employee ID and their total sales amount from the invoices they are associated with.\n",
        "- Step 1: Write a query to sum the total sales per employee ID\n",
        "- Step 2: Create a table called sales in the chinook database that holds two columns: the employee ID and the sale amount\n",
        "- Step 3: To see if your insert was successful, join the employee ID columns of the employee table and your table to see their names\n",
        "\n",
        "Complete the queries below to run this exercise. In many cases, if a query is partially formed, you must complete it where you see the three dots (...)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": false,
        "id": "gOkS-GQFcmpH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Step 1 - run this, but make sure you understand how it works\n",
        "query = \"SELECT c.SupportRepID, sum(total) dollars_spent FROM invoices i INNER JOIN Customers c ON c.customerID = i.CustomerID GROUP BY SupportRepID\"\n",
        "df = pd.read_sql_query(query, conn)\n",
        "df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": false,
        "id": "ZrbhqlR7cmpK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Quick Visualization -- Run Me!!\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "labels = df.SupportRepId.values\n",
        "sizes = df.dollars_spent.values\n",
        "explode = (.2, 0, 0)\n",
        "\n",
        "fig1, ax1 = plt.subplots()\n",
        "ax1.pie(sizes, labels=labels, explode = explode, autopct='%1.1f%%', shadow = True)\n",
        "ax1.axis('equal')\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": false,
        "id": "kbO2oWJ_cmpO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Step 2\n",
        "\n",
        "#Create Table\n",
        "c.execute(\"CREATE TABLE sales ('employeeID' INT NOT NULL, 'total' DECIMAL NOT NULL)\")\n",
        "\n",
        "#Insert into Table - from your df above choose several values\n",
        "c.execute(\"INSERT INTO sales VALUES (3, 833.04)\")\n",
        "c.execute(\"INSERT INTO sales VALUES (4,)\")\n",
        "c.execute(\"INSERT INTO sales VALUES ... )\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": false,
        "id": "PyuZltMxcmpT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Step 3\n",
        "for row in c.execute('select ... '):\n",
        "print(row)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Kh1-s15zcmpX",
        "colab_type": "text"
      },
      "source": [
        "After we are done we have to close the database to make sure it saves everything in our file:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": false,
        "id": "IyHQ_8BacmpY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "c.close()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uq9h4NsYcMac",
        "colab_type": "text"
      },
      "source": [
        "# Intro to Jupyter Notebook and Other Useful Techniques!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "Dpv4TJvoediU"
      },
      "source": [
        "Jupyter Notebook is a very useful tool to write organized Python code. Instead of writing all of your code in one long script, Jupyter Notebook allows you to organize your code in chunks called cells. This text cell (and the heading) are made in a markdown cell - it can be used to write notes about your code or hold long non-code blocks of text! Some people even write entire reports or presentations in Jupyter Notebook. This is great if you want to include a lot of code or run code during a presentation. Using the dropdown menu between the refresh and keyboard buttons, change the next cell to markdown, type something, and press the \"run\" button above to run it!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "id": "7meJEIUbcMah",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "diTQlT2vcMaw",
        "colab_type": "text"
      },
      "source": [
        "This is some new text! "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aTrRwTWncMaz",
        "colab_type": "text"
      },
      "source": [
        "Hover over the white buttons starting with the save icon to learn what each one does!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-YpCLfMhcMa1",
        "colab_type": "text"
      },
      "source": [
        "Keyboard Shortcuts\n",
        "- ctrl + enter: run a cell\n",
        "- when the cell has a BLUE box around it (clicking by the 'In []:' part of the page), press a to add a cell above it and b to add a cell below it"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z795WPlQbs3r",
        "colab_type": "text"
      },
      "source": [
        "## Connect to the Cluster!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KGIt_X1Fbs3u",
        "colab_type": "text"
      },
      "source": [
        "In this activity, you will use Python to interact with a Mongo Database stored on a remote (Cloud) server! This is very realistic in terms of how you might interact with a NoSQL database like MongoDB.  It will be large and not stored on a single machine and certainly not on your local machine. \n",
        "We have a loaded a collection of documents about restaurants in New York City into a MongoDB cluster. First you will import the necessary modules, PyMongo and Pandas. Next you establish a connection to the cluster (either Morgan's or Dr. Rigas') using a connection string. Lastly you specify the database and collection within the cluster that we want to work with."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NOW0tDnybs3x",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pymongo\n",
        "from pymongo import MongoClient\n",
        "import pandas as pd\n",
        "client = MongoClient('')  #You need to use a connection string provided by your instructor\n",
        "db = client.test\n",
        "restaurants = db.restaurants"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PB2sbLfsbs4D",
        "colab_type": "text"
      },
      "source": [
        "## Let's Query!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": true,
        "id": "9sGclidsbs4E",
        "colab_type": "text"
      },
      "source": [
        "Querying is basically the same as you would in your command prompt. The only difference is that PyMongo doesn't support .pretty(). For a simple example: to find one of the Bronx restaurants run the cell below and see the output."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m8EZK3A5bs4G",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "print(restaurants.find_one({\"borough\":\"Bronx\"}))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v4R2-smWbs4P",
        "colab_type": "text"
      },
      "source": [
        "Now if we wanted to find ALL of the Bronx restaurants, we simply cannot print the query. It will create a cursor object. To see all of the query results, we need to use a for loop. See below. This example is limited to output the first 5 documents to save space, but if you wanted to see all of the restaurants, just remove the .limit(5)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lSo4GgQDbs4R",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "for restaurant in restaurants.find({\"borough\":\"Bronx\"}).limit(5):\n",
        "    print(restaurant)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tEHsk_TSbs4a",
        "colab_type": "text"
      },
      "source": [
        "This is not the prettiest to look at. So, we can make use of pandas dataframes! First we establish an empty list. We loop through the restaurants in the query and append them to the list. Finally, we make a dataframe out of the list of json objects and display our result. Run the cell below to see a dataframe of 15 of the Indian cuisine restaurants in Brooklyn in our database."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": false,
        "id": "XYtxltCHbs4c",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "brooklynIndian = []\n",
        "for rest in restaurants.find({\"$and\": [{\"cuisine\":\"Indian\"}, {\"borough\": \"Brooklyn\"}]}).limit(15):\n",
        "    brooklynIndian.append(rest)\n",
        "testDF = pd.DataFrame(brooklynIndian)\n",
        "testDF"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yf4u7cZjbs4j",
        "colab_type": "text"
      },
      "source": [
        "## Your turn! "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "luCT1clXbs4l",
        "colab_type": "text"
      },
      "source": [
        "Use the example above to complete the following exercises. For documentation on Mongo querying visit https://docs.mongodb.com/manual/tutorial/query-documents/ and https://docs.mongodb.com/manual/tutorial/query-embedded-documents/"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x7q33w1ubs4m",
        "colab_type": "text"
      },
      "source": [
        "#1. In the cell below, fill in the missing details to display the fields restaurant_id, name, borough and cuisine, but exclude the ID field for the first 10 documents in the database."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DAn8NJeZbs4o",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "for rest in restaurants.find({},{\"restaurant_id\" : 1,\"name\":1,\"...,\"_id\":0}).limit(...):\n",
        "   print(rest)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GQfyYuiGbs4t",
        "colab_type": "text"
      },
      "source": [
        "#2. Find the first 10 restaurants who have received a _score less than_ 50."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F4VbwCcDbs4v",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "   print(rest)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5hrDpBKvbs41",
        "colab_type": "text"
      },
      "source": [
        "#3. Return _only_ the name, cuisine, and borough for 20 documents that are _NOT IN_ the Bronx, Queens, or Staten Island (Hint: There is a Mongo method called $nin for \"not in\".)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dMfKVMN5bs42",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "   print(rest)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vxwzYRMQbs49",
        "colab_type": "text"
      },
      "source": [
        "#4. Due to a recent inventory mishap, a client needs the names and addresses for the Mexican restaurants north of the Central Park Zoo (lattitude: 40.7678). Do not return the id. This client will only visit the first 20 restaurants in ascending order by name, so only return those. __Hint__: will need to make use of pymongo.ASCENDING. You can also use a a property of the address atribute, address.coord. You are lucky in this case that the longitudes are all negative numbers so you can find an easy way to search for a lattitude number greater than the lattitude of interest."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0hx1h0Shbs49",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "    print(rest)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e7pLp8hObs5E",
        "colab_type": "text"
      },
      "source": [
        "#5. Did you know that MongoDB also supports regular expressions? We have a client that can't remember the name of a restaurant they rated. All this client knows is that it was an American cuisine restaurant in Manhattan whose name started with \"Mad\". We have a few of these in our database. We will create a dataframe of these restaurants to send to our client. Fill in the missing detail below to run this and print the result (__Hint__: The MongoDB regex operator includes an anchor character '^' -- it can go before anything you want to see at the start of a string)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "63LFOq-Vbs5H",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "mysteryRestaurant = []\n",
        "for rest in restaurants.find({\"name\": {\"$regex\" : \"\"}, \"cuisine\": \"\", \"borough\": \"Manhattan\"}):\n",
        "    mysteryRestaurant.append(rest)\n",
        "result = pd.dataframe(...)\n",
        "result"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dNX0vdDSbs5O",
        "colab_type": "text"
      },
      "source": [
        "Keep in mind: The flexibility of Mongo's schema can cause these dataframes to get very messy. Data cleaning will be a crucial step before analysis when using Python on top of MongoDB!"
      ]
    }
  ]
}